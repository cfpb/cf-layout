/* ==========================================================================
   Capital Framework
   Layout Helpers
   ========================================================================== */


/* topdoc
  name: Content layouts
  family: cf-layout
  patterns:
    - name: Standard content columns
      markup: |
        <div class="content-l">
            <div class="content-l_col content-l_col-1">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Full-width column (spans 12 columns)
                </div>
            </div>
        </div>
        <div class="content-l">
            <div class="content-l_col content-l_col-1-2">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Half-width column (spans 6/12 columns)
                </div>
            </div>
            <div class="content-l_col content-l_col-1-2">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Half-width column (spans 6/12 columns)
                </div>
            </div>
        </div>
        <div class="content-l">
            <div class="content-l_col content-l_col-1-3">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Third-width column (spans 4/12 columns)
                </div>
            </div>
            <div class="content-l_col content-l_col-1-3">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Third-width column (spans 4/12 columns)
                </div>
            </div>
            <div class="content-l_col content-l_col-1-3">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Third-width column (spans 4/12 columns)
                </div>
            </div>
        </div>
        <div class="content-l">
            <div class="content-l_col content-l_col-2-3">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;">
                    Two thirds-width column (spans 8/12 columns)
                </div>
            </div>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .content-l
            .content-l_col
      notes:
        - "Simplifies use of grid structure inside content containers (like .content-main)."
        - "Since .content-l_col's are nested within .content_main extra margins will occur. 
           The .content-l container uses the grid_nested-col-group mixin to counter this."
        - ".content-l_col-RATIO classes default to stacking on mobile and displaying as columns 
           above mobile-max width (600px). This may not be the desired breakpoint for
           all use cases, so mixins are provided to simplify changing column display to
           stacked."
        - "Three .content-l modifiers handle the stacking overrides for use cases of
           .content_main, .content_full, and .content_sidebar containers."
        - "Note that the divs with inline styles are for demonstration purposes
           only and should not be used in production."
    - name: .content-l__full modifier
      markup: |
        <div class="content-l content-l__full">
           <div class="content-l_col content-l_col-1">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;
                           margin-bottom: 4px;">
                   Full-width column (spans 12 columns)
               </div>
           </div>
        </div>
        <div class="content-l content-l__full">
           <div class="content-l_col content-l_col-1-2">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;
                           margin-bottom: 4px;">
                   Half-width column (spans 6/12 columns)
               </div>
           </div>
           <div class="content-l_col content-l_col-1-2">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;
                           margin-bottom: 4px;">
                   Half-width column (spans 6/12 columns)
               </div>
           </div>
        </div>
        <div class="content-l content-l__full">
           <div class="content-l_col content-l_col-1-3">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;
                           margin-bottom: 4px;">
                   Third-width column (spans 4/12 columns)
               </div>
           </div>
           <div class="content-l_col content-l_col-1-3">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;
                           margin-bottom: 4px;">
                   Third-width column (spans 4/12 columns)
               </div>
           </div>
           <div class="content-l_col content-l_col-1-3">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;
                           margin-bottom: 4px;">
                   Third-width column (spans 4/12 columns)
               </div>
           </div>
        </div>
        <div class="content-l content-l__full">
           <div class="content-l_col content-l_col-2-3">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;">
                   Two thirds-width column (spans 8/12 columns)
               </div>
           </div>
        </div>
      codenotes:
        - .content-l.content-l__full
      notes:
        - "Designed for use within .content_full containers."
        - "Displays .content-l_col-1-2 as columns at tablet sizes & above (600px+)"
        - "Displays other common .content-l_col modifiers (.content-l_col-1-3, 
           .content-l_col-2-3, .content-l_col-3-8, .content-l_col-5-8) 
           as columns above 767px."
    - name: .content-l__main modifier
      markup: |
        <div class="content-l content-l__main">
             <div class="content-l_col content-l_col-1">
                 <div style="background: #F1F2F2;
                             text-align: center;
                             padding: 8px;
                             margin-bottom: 4px;">
                     Full-width column (spans 12 columns)
                 </div>
             </div>
         </div>
         <div class="content-l content-l__main">
             <div class="content-l_col content-l_col-1-2">
                 <div style="background: #F1F2F2;
                             text-align: center;
                             padding: 8px;
                             margin-bottom: 4px;">
                     Half-width column (spans 6/12 columns)
                 </div>
             </div>
             <div class="content-l_col content-l_col-1-2">
                 <div style="background: #F1F2F2;
                             text-align: center;
                             padding: 8px;
                             margin-bottom: 4px;">
                     Half-width column (spans 6/12 columns)
                 </div>
             </div>
         </div>
         <div class="content-l content-l__main">
             <div class="content-l_col content-l_col-1-3">
                 <div style="background: #F1F2F2;
                             text-align: center;
                             padding: 8px;
                             margin-bottom: 4px;">
                     Third-width column (spans 4/12 columns)
                 </div>
             </div>
             <div class="content-l_col content-l_col-1-3">
                 <div style="background: #F1F2F2;
                             text-align: center;
                             padding: 8px;
                             margin-bottom: 4px;">
                     Third-width column (spans 4/12 columns)
                 </div>
             </div>
             <div class="content-l_col content-l_col-1-3">
                 <div style="background: #F1F2F2;
                             text-align: center;
                             padding: 8px;
                             margin-bottom: 4px;">
                     Third-width column (spans 4/12 columns)
                 </div>
             </div>
         </div>
         <div class="content-l content-l__main">
             <div class="content-l_col content-l_col-2-3">
                 <div style="background: #F1F2F2;
                             text-align: center;
                             padding: 8px;">
                     Two thirds-width column (spans 8/12 columns)
                 </div>
             </div>
         </div>
      codenotes:
        - .content-l.content-l__main
      notes:
        - "Designed for use in .content_main containers, which have reduced (75%) width 
           above tablet sizes to accommodate adjacent sidebar column."
        - "Displays .content-l_col-1-2 as columns in the tablet range, 600-800px;
           stacked from 800-899, the start of sidebar range; and as columns again at 900px+"
        - "Displays other common .content-l_col modifiers (.content-l_col-1-3, .content-l_col-2-3,    
           .content-l_col-3-8, .content-l_col-5-8) as columns above 900px."
    - name: .content-l__sidebar modifier
      markup: |
        <div class="content-l content-l__sidebar">
             <div class="content-l_col content-l_col-1">
                 <div style="background: #F1F2F2;
                             text-align: center;
                             padding: 8px;
                             margin-bottom: 4px;">
                     Full-width column (spans 12 columns)
                 </div>
             </div>
        </div>
        <div class="content-l content-l__sidebar">
           <div class="content-l_col content-l_col-1-2">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;
                           margin-bottom: 4px;">
                   Half-width column (spans 6/12 columns)
               </div>
           </div>
           <div class="content-l_col content-l_col-1-2">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;
                           margin-bottom: 4px;">
                   Half-width column (spans 6/12 columns)
               </div>
           </div>
        </div>
        <div class="content-l content-l__sidebar">
           <div class="content-l_col content-l_col-1-3">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;
                           margin-bottom: 4px;">
                   Third-width column (spans 4/12 columns)
               </div>
           </div>
           <div class="content-l_col content-l_col-1-3">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;
                           margin-bottom: 4px;">
                   Third-width column (spans 4/12 columns)
               </div>
           </div>
           <div class="content-l_col content-l_col-1-3">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;
                           margin-bottom: 4px;">
                   Third-width column (spans 4/12 columns)
               </div>
           </div>
        </div>
        <div class="content-l content-l__sidebar">
           <div class="content-l_col content-l_col-2-3">
               <div style="background: #F1F2F2;
                           text-align: center;
                           padding: 8px;">
                   Two thirds-width column (spans 8/12 columns)
               </div>
           </div>
        </div>
      codenotes:
        - .content-l.content-l__sidebar
      notes:
        - "For use in sidebar containers, which are full width only 
           on tablet widths (600-800px)."
        - "Displays .content-l_col-1-2 as columns in the tablet range, 
           600-800px, and stacked at all other widths."
    - name: Large gutters modifier
      markup: |
        <div class="content-l content-l__main  content-l__large-gutters">
            <div class="content-l_col content-l_col-1">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Full-width column (spans 12 columns)
                </div>
            </div>
        </div>
        <div class="content-l content-l__main  content-l__large-gutters">
            <div class="content-l_col content-l_col-1-2">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Half-width column (spans 6/12 columns)
                </div>
            </div>
            <div class="content-l_col content-l_col-1-2">
                <div style="background: #F1F2F2;
                            text-align: center;
                            padding: 8px;
                            margin-bottom: 4px;">
                    Half-width column (spans 6/12 columns)
                </div>
            </div>
        </div>
      codenotes:
        - .content-l.content-l__large-gutters
      notes:
        - "Adds 30px gutters to all columns by simply adding the
           .content-l__large-gutters modifier."
  tags:
    - cf-layout
*/


.content-l {
    // Used to position __divider modifiers
    position: relative;

    .respond-to-min(@tablet-min, {
        .grid_nested-col-group();
    });
    
    &__full {
        .respond-to-range(@tablet-min, 767px, {
            .stack-col-thirds();
            .stack-col-eighths(); 
        });
    }
    
    &__main {
        .respond-to-range(801px, 899px, {
            .stack-col(content-l_col-1-2);
        });

        .respond-to-range(@tablet-min, 899px, {
            .stack-col-thirds();
            .stack-col-eighths();        
        });
    }
    
    &__sidebar {
        .stack-col-thirds();
        .stack-col-eighths();        

        .respond-to-min(801px, {
            .stack-col(content-l_col-1-2);
        });
    }

    &__large-gutters {
        .respond-to-min(@tablet-min, {
            margin-left: -@grid_gutter-width;
            margin-right: -@grid_gutter-width;

            & .content-l_col {
                border-left-width: @grid_gutter-width;
                border-right-width: @grid_gutter-width;
            }
        });
    }
}

.content-l_col {
    & + & {
        margin-top: unit(@grid_gutter-width / @base-font-size-px, em);
    }
    .respond-to-min(@tablet-min, {
        &.content-l_col-1-2 + &.content-l_col-1-2,
        &.content-l_col-1-3 + &.content-l_col-1-3,
        &.content-l_col-3-8 + &.content-l_col-3-8,
        &.content-l_col-3-8 + &.content-l_col-5-8,
        &.content-l_col-5-8 + &.content-l_col-3-8 {
            margin-top: 0;
        }
    });
}

.content-l_col-1 {
    .respond-to-min(@tablet-min, {
        .grid_column(12);
    });
}

.content-l_col-1-2 {
    .respond-to-min(@tablet-min, {
        .grid_column(6);
    });
}

.content-l_col-1-3 {
    .respond-to-min(@tablet-min, {
        .grid_column(4);
    });
}

.content-l_col-2-3 {
    .respond-to-min(@tablet-min, {
        .grid_column(8);
    });
}

.content-l_col-3-8 {
    .respond-to-min(@tablet-min, {
        .grid_column(3, 8);
    });
}

.content-l_col-5-8 {
    .respond-to-min(@tablet-min, {
        .grid_column(5, 8);
    });
}


/* topdoc
  name: Content layout column dividers
  family: cf-layout
  notes:
    - "Adds dividers between specified .content-l_col-X-X classes."
    - "Layout dividers work in conjunction with .content-l_col-X-X elements and
       have specific needs depending on which column element variant they are
       attached to. For example .content-l_col-1-2 has different divider needs
       than .content-l_col-1-3 because they may break to single columns at different
       breakpoints."
    - "Dividers use absolute positioning relative to the .content-l element and
       depends on .content-l using `position: relative;`. This allows vertical
       dividers to span the height of the tallest column. Just be aware that if
       you have more than one row of columns, and each row has columns of
       different widths, the borders will cause unwanted overlapping since they
       will span the height of the entire .content-l element."
  patterns:
    - name: .content-l_col__before-divider (modifier)
      markup: |
        <div class="content-l content-l__large-gutters">
            <div class="content-l_col content-l_col-1-2">
                <img src="http://placekitten.com/600/320">
                <br>
                Half-width column (spans 6/12 columns)
            </div>
            <div class="content-l_col content-l_col-1-2 content-l_col__before-divider">
                <img src="http://placekitten.com/600/320">
                <br>
                Half-width column (spans 6/12 columns)
            </div>
        </div>
        <br>
        <!-- Starting a new .content-l so that the dividers from
             .content-l_col.content-l_col-1-2.content-l_col__before-divider
             won't overlap the .content-l_col-1-3 columns. -->
        <div class="content-l content-l__large-gutters">
            <div class="content-l_col content-l_col-1-3">
                Third-width column (spans 4/12 columns)
            </div>
            <div class="content-l_col content-l_col-1-3 content-l_col__before-divider">
                Third-width column (spans 4/12 columns)
            </div>
            <div class="content-l_col content-l_col-1-3 content-l_col__before-divider">
                Third-width column (spans 4/12 columns)
            </div>
        </div>
      codenotes:
        - .content-l_col__before-divider
  tags:
    - cf-layout
*/

.content-l_col__before-divider.content-l_col-1-2 {
    .respond-to-max(@mobile-max {
        .grid_column__top-divider();
    });

    .respond-to-min(@tablet-min, {
        .grid_column__left-divider();
    });
}

.content-l_col__before-divider.content-l_col-1-3 {
    .respond-to-max(@mobile-max {
        .grid_column__top-divider();
    });

    .respond-to-min(@tablet-min, {
        .grid_column__left-divider();
    });
}


.stack-col(@col) {
    .content-l_col.@{col} { 
        width: 100%;
        
        &.content-l_col__before-divider {
            .grid_column__top-divider();
        }
    }
    
    &.content-l__large-gutters {
        .content-l_col.@{col}.content-l_col__before-divider {
            border-left-width: @grid_gutter-width;
        }
    }
    
    .content-l_col.@{col} + .content-l_col.@{col} {
        margin-top: unit(@grid_gutter-width / @base-font-size-px, em);
    }
}

.stack-col-thirds() {
  .stack-col(content-l_col-1-3);
  .stack-col(content-l_col-2-3);
  
  .content-l_col.content-l_col-1-3 + .content-l_col.content-l_col-2-3,
  .content-l_col.content-l_col-2-3 + .content-l_col.content-l_col-1-3 {
     margin-top: unit(@grid_gutter-width / @base-font-size-px, em);
  }
}

.stack-col-eighths() {
  .stack-col(content-l_col-3-8);
  .stack-col(content-l_col-5-8);

  .content-l_col.content-l_col-3-8 + .content-l_col.content-l_col-5-8,
  .content-l_col.content-l_col-5-8 + .content-l_col.content-l_col-3-8 {
     margin-top: unit(@grid_gutter-width / @base-font-size-px, em);
  }
}

/* topdoc
  name: Content bar
  family: cf-layout
  patterns:
    - name: A 10 pixel bar that divides the header or hero from the main content
      markup: |
        <div class="content_bar"></div>
      notes:
        - "This is necessary because we don't have a predictable place to put a
           full-width border. It needs to be under the hero on pages with
           heroes, but under the header if there is no hero."
        - ".content_bar must come after .content_hero but before .content_wrapper"
  tags:
    - cf-layout
*/

.content_bar {
    height: 10px;
    background: @green;
}


/* topdoc
  name: Content line
  family: cf-layout
  patterns:
    - name: "A 1 pixel edge to edge bar that can divide content."
      markup: |
        <div class="content_line"></div>
  tags:
    - cf-layout
*/

.content_line {
    height: 1px;
    background: @gray-50;
}


/* topdoc
  name: Main content and sidebar
  family: cf-layout
  patterns:
    - name: Standard layout for the main content area and sidebar
      markup: |
        <main class="content" id="main" role="main">
            <section class="content_hero" style="background: #E3E4E5">
                Content hero
            </section>
            <div class="content_bar"></div>
            <div class="content_wrapper">
                <section class="content_main">
                    Main content area
                </section>
                <aside class="content_sidebar" style="background: #F1F2F2">
                    Sidebar
                </aside>
            </div>
        </main>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          main.content
            .content_hero
            .content_bar
            .content_wrapper
              .content_sidebar
              .content_main
      notes:
        - "By default .content_main and .content_sidebar stack vertically. When
           using the modifiers described below to create columns, the columns
           will remain stacked for smaller screens and then convert to to
           columns at 801px."
        - ".content_bar must come after .content_hero (if it exists) but before
           .content_wrapper."
        - "Inline styling is for demonstration purposes only; do not include it
           in your markup."
    - name: Left-hand navigation layout
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="content_bar"></div>
            <div class="content_wrapper">
                <aside class="content_sidebar">
                    Section navigation
                </aside>
                <section class="content_main">
                    <h2>Main content area</h2>
                    <p>
                        Lorem ipsum dolor sit amet, consectetur adipisicing elit.
                        Cum corrupti tempora nam nihil qui mollitia consectetur
                        corporis nemo culpa dolorum! Laborum at eos deleniti
                        consequatur itaque officiis debitis quisquam! Provident!
                    </p>
                </section>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content__1-3
      notes:
        - "Add a class of .content__L-R to main.content to determine the width
           ratio of .content_main and .content_sidebar, where 'L' is the
           left-hand item and 'R' is the right-hand item. The two common
           configurations are 1-3 (sidebar on the left, content on the right, in
           a ratio of 1:3) and 2-1 (content on the left, sidebar on the right,
           in a ratio of 2:1). It is assumed that the content is wider than the
           sidebar."
    - name: Right-hand sidebar layout
      markup: |
        <main class="content content__2-1" id="main" role="main">
            <div class="content_bar"></div>
            <div class="content_wrapper">
                <section class="content_main">
                    <h2>Main content area</h2>
                    <p>
                        Lorem ipsum dolor sit amet, consectetur adipisicing elit.
                        Cum corrupti tempora nam nihil qui mollitia consectetur
                        corporis nemo culpa dolorum! Laborum at eos deleniti
                        consequatur itaque officiis debitis quisquam! Provident!
                    </p>
                </section>
                <aside class="content_sidebar" style="background: #F1F2F2">
                    Sidebar
                </aside>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content__2-1
      notes:
        - "Add a class of .content__L-R to main.content to determine the width
           ratio of .content_main and .content_sidebar, where 'L' is the
           left-hand item and 'R' is the right-hand item. The two common
           configurations are 1-3 (sidebar on the left, content on the right, in
           a ratio of 1:3) and 2-1 (content on the left, sidebar on the right,
           in a ratio of 2:1). It is assumed that the content is wider than the
           sidebar."
        - "Inline styling is for demonstration purposes only; do not include it
           in your markup."
    - name: Narrow content column option
      markup: |
        <main class="content content__2-1" id="main" role="main">
            <div class="content_bar"></div>
            <div class="content_wrapper">
                <section class="content_main content_main__narrow">
                    <h2>Main content area</h2>
                    <p>
                        Lorem ipsum dolor sit amet, consectetur adipisicing elit.
                        Cum corrupti tempora nam nihil qui mollitia consectetur
                        corporis nemo culpa dolorum! Laborum at eos deleniti
                        consequatur itaque officiis debitis quisquam! Provident!
                    </p>
                </section>
                <aside class="content_sidebar" style="background: #F1F2F2">
                    Sidebar
                </aside>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content_main__narrow
      notes:
        - "Add a class of .content_main__narrow to .content_main to get a
           one-column (in a 12-column grid) gutter on the right side."
        - "Inline styling is for demonstration purposes only; do not include it
           in your markup."
    - name: Flush bottom modifier
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="content_bar"></div>
            <div class="content_wrapper">
                <aside class="content_sidebar content__flush-bottom">
                    Side with no bottom padding...
                </aside>
                <section class="content_main content__flush-bottom">
                    Main content with no bottom padding...
                    <div class="block
                                block__flush-bottom
                                block__flush-sides
                                block__bg">
                        .content__flush-bottom is very useful when you have a
                        content block inside of .content_main with a background
                        and flush sides.
                    </div>
                </section>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content__flush-bottom
      notes:
        - "Add a class of .content__flush-bottom to .content_main or
           content_sidebar to remove bottom padding."
    - name: Flush top modifier (only on small screens)
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="content_bar"></div>
            <div class="content_wrapper">
                <aside class="content_sidebar content__flush-top-on-small">
                    Side with no top padding on small screens...
                </aside>
                <section class="content_main">
                    Main content
                </section>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content__flush-top-on-small
      notes:
        - "Add a class of .content__flush-top-on-small to .content_main or
           .content_sidebar to remove top padding on small screens only.
           'Small' screens in this case refers to the breakpoint where
           .content_main and .content_sidebar single column layout."
    - name: Flush all modifier (only on small screens)
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="content_bar"></div>
            <div class="content_wrapper">
                <aside class="content_sidebar content__flush-all-on-small">
                    Side with no padding or border-based gutters on small screens...
                </aside>
                <section class="content_main">
                    Main content
                </section>
            </div>
        </main>
        <footer class="footer" role="contentinfo">
            <div class="wrapper">
                Footer
            </div>
        </footer>
      codenotes:
        - .content__flush-all-on-small
      notes:
        - "Add a class of .content__flush-all-on-small to .content_main or
           .content_sidebar to remove all padding and border-based gutters on
           small screens only. 'Small' screens in this case refers to the
           breakpoint where .content_main and .content_sidebar single column layout."
  tags:
    - cf-layout
*/

.content_wrapper {
    &:extend(.wrapper all);
}

.content_intro,
.content_main,
.content_sidebar {
    padding: unit(@grid_gutter-width / @base-font-size-px, em)
             unit((@grid_gutter-width / 2) / @base-font-size-px, em);

    .respond-to-min(600px, {
        .grid_column(12);
        padding: unit((@grid_gutter-width * 2) / @base-font-size-px, em)
                 unit((@grid_gutter-width / 2) / @base-font-size-px, em);
    });

    .respond-to-min(801px, {
        padding: unit((@grid_gutter-width * 2) / @base-font-size-px, em)
                 0;
    });
}

.respond-to-min(801px, {
    .content_intro {
        .grid_column(12);
    }
});

// Set up standard multi-column content area layouts
.respond-to-min(801px, {
    .content {
        &__1-3 {
            .content_sidebar {
                .grid_column(3);

                padding-right: unit(@grid_gutter-width / @base-font-size-px, em);
            }

            .content_main {
                .grid_column(9);
                position: relative;

                &:after {
                    content: '';
                    border-left: 1px solid @gray-50;
                    position: absolute;
                    top: unit((@grid_gutter-width * 2) / @base-font-size-px, em);
                    bottom: 0;
                    left: unit(-1 * @grid_gutter-width / @base-font-size-px, em);
                }
            }
        }

        &__2-1 {
            .content_main {
                .grid_column(8);

                &:after {
                    right: unit(-1 * @grid_gutter-width / @base-font-size-px, em);
                }
            }

            .content_sidebar {
                .grid_column(4);

                padding-left: unit(@grid_gutter-width / @base-font-size-px, em);
            }
        }
    }
}); // END min-width 801 block

.respond-to-min(1024px, {
    .content__2-1 .content_main__narrow {
        .grid_column(7, @grid_total-columns, 0, 1);
    }
});

.content__flush-bottom {
    padding-bottom: 0;
}

.content__flush-top-on-small {
    .respond-to-max(800px, {
        padding-top: 0;
    });
}

.content__flush-all-on-small {
    .respond-to-max(800px, {
        padding: 0;
        border-width: 0;
    });
}


/* topdoc
  name: Block
  family: cf-layout
  notes:
    - ".block is a base class with several modifiers that help you separate
       chunks of content via margins, padding, borders, and backgrounds."
  patterns:
    - name: Standard block example
      markup: |
        Main content...
        <div class="block">
            Content block
        </div>
        <div class="block">
            Content block
        </div>
        <div class="block">
            Content block
        </div>
      codenotes:
        - .block
      notes:
        - "The standard .block class by itself simply adds a margin of twice the
           gutter width to the top and bottom."
    - name: Flush-top modifier
      markup: |
        Main content...
        <div class="block block__flush-top">
            Content block with no top margin.
        </div>
        <div class="block">
            Content block
        </div>
      codenotes:
        - .block.block__flush-top
      notes:
        - "Removes the top margin from .block."
    - name: Flush-bottom modifier
      markup: |
        Main content...
        <div class="block block__flush-bottom">
            Content block with no bottom margin.
        </div>
        <div class="block block__flush-top">
            Content block with no top margin.
        </div>
      codenotes:
        - .block.block__flush-bottom
      notes:
        - "Removes the bottom margin from .block."
    - name: Flush-sides modifier
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="content_wrapper">
                <aside class="content_sidebar">
                    Section navigation
                </aside>
                <section class="content_main">
                    Main content...
                    <aside class="block block__flush-sides">
                        Content block with no side margins.
                    </aside>
                </section>
            </div>
        </main>
      codenotes:
        - .block.block__flush-sides
      notes:
        - "Removes the side margin from .block."
        - "Typically used in conjuction with .block__bg to create a 'well' whose
           background extends into the left and right gutters. (See below.)"
    - name: Border-top modifier
      markup: |
        Main content...
        <div class="block block__border-top">
            Content block with top border.
        </div>
      codenotes:
        - .block.block__border-top
      notes:
        - "Adds top border to .block."
    - name: Border-bottom modifier
      markup: |
        Main content...
        <div class="block block__border-bottom">
            Content block with bottom border.
        </div>
      codenotes:
        - .block.block__border-bottom
      notes:
        - "Adds bottom border to .block."
    - name: Padded-top modifier
      markup: |
        Main content...
        <div class="block block__padded-top block__border-top">
            Content block with reduced top margin & added top padding
            and border.
        </div>
      codenotes:
        - .block.block__padded-top
      notes:
        - "Breaks top margin into margin & padding. Useful in combination with
           block__border-top to add padding between block contents & border."
    - name: Padded-bottom modifier
      markup: |
        <div class="block block__padded-bottom block__border-bottom">
            Content block with reduced bottom margin & added bottom padding
            and border.
        </div>
        Content...
      codenotes:
        - .block.block__padded-bottom
      notes:
        - "Breaks bottom margin into margin & padding. Useful in combination with
           block__border-bottom to add padding between block contents & border."
    - name: Background modifier
      markup: |
        Main content...
        <div class="block block__bg">
            Content block with a background
        </div>
      codenotes:
        - .block.block__bg
      notes:
        - "Adds a background color and padding to .block."
    - name: Background and flush-sides modifier combo example
      markup: |
        <main class="content content__1-3" id="main" role="main">
            <div class="content_wrapper">
                <aside class="content_sidebar">
                    Section navigation
                </aside>
                <section class="content_main content__flush-bottom">
                    Main content...
                    <div class="block block__flush-sides block__bg">
                        Content block with a background and flush sides
                    </div>
                </section>
            </div>
        </main>
      codenotes:
        - .block.block__flush-sides.block__bg
      notes:
        - "This is an example of combining modifiers to get a flush padded bg
           with a .block."
    - name: Sub blocks
      markup: |
        <div class="block block__sub">
            <div style="background: #F1F2F2; padding: 8px;">
                Sub content block
            </div>
        </div>
        <div class="block block__sub">
            <div style="background: #F1F2F2; padding: 8px;">
                Sub content block
            </div>
        </div>
        <div class="block block__sub">
            <div style="background: #F1F2F2; padding: 8px;">
                Sub content block
            </div>
        </div>
      codenotes:
        - .block.block__sub
      notes:
        - "Useful for when you need some consistent margins between
           blocks that are nested within other blocks."
        - "Note that the divs with inline styles are for demonstration purposes
           only and should not be used in production."
    - name: Mixing content blocks with content layouts
      markup: |
        <div class="content-l">
            <div class="block content-l_col content-l_col-1-2">
                <div style="background: #F1F2F2; padding: 8px;">
                    Content block that is also a content column.
                    Notice how my top margins only exist on smaller screens when
                    I need to stack vertically.
                </div>
            </div>
            <div class="block content-l_col content-l_col-1-2">
                <div style="background: #F1F2F2; padding: 8px;">
                    Content block that is also a content column.
                    Notice how my top margins only exist on smaller screens when
                    I need to stack vertically.
                </div>
            </div>
        </div>
      codenotes:
        - .block.content-l_col
      notes:
        - "You can safely combine .block with .content-l_col to
           achieve a column-based layout at larger screens with no top margins
           and a vertical layout at smaller screens that do have margins."
        - "Note that the divs with inline styles are for demonstration purposes
           only and should not be used in production."
  tags:
    - cf-layout
*/

.block {
    margin-top: unit((@grid_gutter-width * 2) / @base-font-size-px, em);
    margin-bottom: unit((@grid_gutter-width * 2) / @base-font-size-px, em);
    
    &__border-top {
        border-top: 1px solid @gray-50;
    }
    
    &__border-bottom {
        border-bottom: 1px solid @gray-50;
    }

    &__flush-top {
        margin-top: 0 !important;
    }

    &__flush-bottom {
        margin-bottom: 0 !important;
    }

    &__flush-sides {
        margin-right: -(@grid_gutter-width / 2);
        margin-left: -(@grid_gutter-width / 2);
        .respond-to-min(600px, {
            margin-right: -@grid_gutter-width;
            margin-left: -@grid_gutter-width;
        });
    }

    &__bg {
        padding: unit(@grid_gutter-width / @base-font-size-px, em)
                 unit((@grid_gutter-width / 2) / @base-font-size-px, em);
        background: @gray-10;
        .respond-to-min(600px, {
            padding: unit(45 / @base-font-size-px, em)
                     unit(@grid_gutter-width / @base-font-size-px, em);
        });
    }
    
    &__padded-top {
        padding-top: unit(30px / @base-font-size-px, em);
        margin-top: unit(30px / @base-font-size-px, em);
    }

    &__padded-bottom {
        padding-bottom: unit(30px / @base-font-size-px, em);
        margin-bottom: unit(30px / @base-font-size-px, em);
    }

    &__sub {
        margin-top: unit(30px / @base-font-size-px, em);
        margin-bottom: unit(30px / @base-font-size-px, em);
    }

    // Overrides for when .block is also a column
    .content-l_col&,
    .content-l_col&__sub {
        .respond-to-min(600px, {
            margin-top: 0;
        });
    }
}


/* topdoc
  name: Bleedbar sidebar styling
  family: cf-layout
  patterns:
    - name: Give the sidebar a background color that bleeds off the edge of the screen
      markup: |
        <main class="content content__2-1 content__bleedbar" id="main" role="main">
            <section class="content_hero" style="background: #E3E4E5">
                Content hero
            </section>
            <div class="content_bar"></div>
            <div class="content_wrapper">
                <section class="content_main">
                    Main content area
                </section>
                <aside class="content_sidebar">
                    Bleeding sidebar
                </aside>
            </div>
        </main>
      codenotes:
        - ".content__bleedbar"
      notes:
        - "Simply add class .content__bleedbar to main.content."
        - "Only supports sidebars on the right, for now."
        - "Inline styling is for demonstration purposes only; do not include it
           in your markup."
  tags:
    - cf-layout
*/

.content__bleedbar {
    // Overrides the border between main and sidebar, because bleedbar makes its own.
    .content_main:after {
        content: none;
    }

    .content_sidebar {
        padding: unit(@grid_gutter-width / @base-font-size-px, em)
                 unit((@grid_gutter-width / 2) / @base-font-size-px, em);
        background: @gray-10;
    }

    .respond-to-min(801px, {
        // Prevent pseudo element background from creating horizontal scrollbar.
        overflow: hidden;

        .content_sidebar {
            padding: unit((@grid_gutter-width * 2) / @base-font-size-px, em)
                     0
                     unit((@grid_gutter-width / 2) / @base-font-size-px, em)
                     unit(@grid_gutter-width / @base-font-size-px, em);
            margin-left: 0;
            position: relative;
            z-index: 1;

            // Remove background color from actual sidebar.
            // It will now be provided by pseudoelement :after sidebar parent.
            background: transparent;

            .lt-ie8 & {
                // Make sure the sidebar still has a background in IE7.
                padding-right: @grid_gutter-width;
                background: @gray-10;
            }
        }

        .content_wrapper:after {
            // Create faux sidebar background.
            content: '';
            display: block;
            width: 9999px;
            border-left: 1px solid @gray-50;
            height: 100%;
            position: absolute;
            top: 0;
            z-index: 0;
            // The three in the below calculation is a magic number.
            // Not entirely sure what to do about it right now.
            margin-left: (@grid_gutter-width / 3);
            background: @gray-10;
        }

        &.content__2-1 .content_wrapper:after {
            left: 66.666666667%;
        }

        &.content__3-1 .content_wrapper:after {
            left: 75%;
        }
    });
}


/* topdoc
  name: cf-grid helpers
  family: cf-layout
  patterns:
    - name: .wrapper (base)
      markup: |
        <div class="wrapper">
            Wrapper
        </div>
      notes:
        - "Turns an element into a cf-grid wrapper at 801px and above."
        - "Includes some explicit declarations for IE8 due to the fact that it
           doesn't support media queries."
    - name: .wrapper__match-content (modifier)
      markup: |
        <div class="wrapper wrapper__match-content">
            <code>.wrapper.wrapper__match-content</code>
            <img src="http://placekitten.com/800/40">
        </div>
        <br>
        <main class="content" id="main" role="main">
            <div class="content_wrapper">
                <section class="content_main">
                    <code>.content_wrapper .content_main</code>
                    <img src="http://placekitten.com/800/40">
                </section>
            </div>
        </main>
      notes:
        - "The .content area has a visual gutter twice the size of a normal
           wrapper because the gutters from the sidebar and main content divs
           add to the gutters of the wrapper. This modifier gives you a wrapper
           with wider gutters to match the visual gutters of the .content area."
    - name: Column divider modifiers
      notes:
        - "cf-grid columns use left and right borders for fixed margins which
           means it's not possible to set visual left and right borders directly
           on them. Instead we can use the :before pseudo element and position
           it absolutely. The added benefit of doing it this way is that the
           border spans the entire height of the next parent using `position:
           relative;`. This means that the border will always match the height
           of the tallest column in the row."
      codenotes:
        - .grid_column__top-divider
        - .grid_column__left-divider
        - |
          .my-column-1-2 {

              // Creates a column that spans 6 out of 12 columns.
              .grid_column(6, 12);

              // Add a top divider only at screen 599px and smaller.
              .respond-to-max(599px {
                  .grid_column__top-divider();
              });

              // Add a left divider only at screen 600px and larger.
              .respond-to-min(600px, {
                  .grid_column__left-divider();
              });

          }
  tags:
    - cf-layout
*/

.wrapper {
    .respond-to-min(801px, {
        .grid_wrapper();
    });

    &__match-content {
        padding-left: @grid_gutter-width / 2;
        padding-right: @grid_gutter-width / 2;

        .respond-to-min(600px, {
            padding-left: @grid_gutter-width;
            padding-right: @grid_gutter-width;
            max-width: 1140px;
        });
    }
}

.lt-ie9 {
    & .wrapper {
        max-width: 960px;
    }

    & body {
        min-width: 800px;
    }
}

.grid_column__top-divider {
    margin-top: unit((@grid_gutter-width * 2) / @base-font-size-px, em);
    border-left-width: @grid_gutter-width / 2;
    
    &:before {
        content: "";
        display: block;
        height: 1px;
        margin-bottom: unit(@grid_gutter-width / @base-font-size-px, em);
        background-color: @gray-50;
        position: static;
        width: 100%;
        margin-left: auto !important;
    }
}

.grid_column__left-divider {
    border-left-width: @grid_gutter-width;

    &:before {
        content: "";
        position: absolute;
        top: 0;
        bottom: 0;
        width: 1px;
        display: block;
        background-color: @gray-50;
        margin-left: -@grid_gutter-width;
    }
}

/* topdoc
  name: Featured content module
  family: cf-layout
  patterns:
    - name: .fcm 
      markup: |
        <style>
        </style>
        <main class="content content__1-3" id="main" role="main">
            <div class="content_wrapper">
                <aside class="content_sidebar">
                    Section navigation
                </aside>
                <section class="content_main">
                    <section class="fcm">
                      <div class="fcm_text">
                        <h2 class="fcm_tag">
                          <span class="fcm_icon cf-icon cf-icon-date"></span>
                          Featured event
                        </h2>
                        <h1 class="fcm_headline">Consumer Advisory Board meeting</h1>
                        <p class="fcm_body">Oct 22, 2015 @ 10:00AM EDT <br/>Washington, DC</p>
                        <a class="fcm_cta jump-link">Read more about the event</a>
                      </div>
                      <div class="fcm_visual">
                        <div class="fcm_wrapper">
                        <img class="fcm_img" src="http://placekitten.com/g/540/270">
                        </div>
                      </div>
                    </section>
                </section>
            </div>
        </main>
      notes:
        - "Featured content module, like a hero, consists of headline/text/optional call to action
           along with a visual. It is intended to be used in a main content column next to a   
           sidebar."
        - "Text is full width & displayed above the visual in the default/mobile view. At larger
           screen sizes, the text occupies a fixed portion of the screen (equal to the width of 
           5 of 12 columns at 799px for tablets & 3 of 12 columns at 1140px for desktop). The
           visual occupies the remaining space. The visual also has a fixed width on larger screens   
           (defaults to 540 so it has 16x9 ratio on desktop where the height of the module is 
           270px), and is center-cropped when it becomes too wide for the available space."
        - "Add the .fcm__left modifier when the sidebar column is on the right side. The background
           color will bleed off the left edge of the screen at desktop sizes."
      codenotes:
        - .fcm
        - .fcm__left
  tags:
    - cf-layout
*/


.fcm {
  background-color: @gray-5;
  border-top: 1px solid @gray-50;
  border-bottom: 1px solid @gray-50;
  position: relative;
  
  .respond-to-max(@mobile-max, {    
    margin-right: unit((-@grid_gutter-width / 2) / @base-font-size-px, em);
    margin-left: unit((-@grid_gutter-width / 2) / @base-font-size-px, em);
  });
  
  .respond-to-min(@tablet-min, {    
    margin-right: unit(-@grid_gutter-width / @base-font-size-px, em);
    margin-left: unit(-@grid_gutter-width / @base-font-size-px, em);
  });
  
  .respond-to-min(800px, {
    box-sizing: border-box;
    min-height: 270px;
    margin-right: 0;
    border-right: 1px solid @gray-50;
    padding-left: unit(@grid_gutter-width / @base-font-size-px, em);
  });
  
  &__left {
    .respond-to-min(800px, {
      margin-right: unit(-@grid_gutter-width / @base-font-size-px, em);
      margin-left: 0;
      padding-left: 0;
      border-right-width: 0;
      
      // bleed background off left edge of page
      &:before {
        left: -200%;
        background-color: @gray-5;
        content: '';
        display: block;
        position: absolute;
        width: 200%;
        border-top: 1px solid @gray-50;
        border-bottom: 1px solid @gray-50;
        top: -1px;
        bottom: -1px;
      }
    });
  }
  
  
  &_text {
    padding-top: unit(25px / @base-font-size-px, em); // approximates 30px visually
    padding-bottom: unit(@grid_gutter-width / @base-font-size-px, em);
    
    .respond-to-max(@mobile-max, {    
      padding-right: unit((@grid_gutter-width /2) / @base-font-size-px, em);
      padding-left: unit((@grid_gutter-width /2) / @base-font-size-px, em);
    });
    
    .respond-to-range(@tablet-min, 799px, {    
      padding-left: unit(@grid_gutter-width / @base-font-size-px, em);
    });
    
    .respond-to-min(@tablet-min, {
      margin-right: unit((@grid_gutter-width /2) / @base-font-size-px, em);
      width: 303px; // width of 5 of 12 cols at 799px - 30px padding
      float: left;
      border-width: 0;
    });
    
    .respond-to-min(800px, {
      width: 270px; // width of 3 of 12 cols at 1140px - 15px padding
    });
    
  }
  
  &_tag {
    .h4;
    margin-bottom: unit(18px / @base-font-size-px, em); // approximates 30px visually
    .respond-to-max(@mobile-max, {
      .h5;
    });
  }
  
  &_icon {
    .respond-to-max(@mobile-max, {
      display: none;
    });
  }

  &_headline {
    .h2;
  }

  &_body {
    margin-bottom: unit(20px / @base-font-size-px, em);
    .webfont-regular();
    .respond-to-max(@mobile-max, {
      .h4;
    });
  }

  &_cta {
    .webfont-regular();
  }

  &_visual {
    width: 100%;
    line-height: 0;
  }
 
  // crops image to center
  &_wrapper {
    text-align: center; 
    overflow: hidden; 
  }

  &_img {
    .respond-to-min(@tablet-min, {
      position: relative; 
      left: 50%;
      transform: translate(-50%,0); 
      max-width: 540px;
      width: 540px;
    });
  }
  
}

.lt-ie9 {
  
  .fcm {
    border-left: 1px solid @gray-50;
  }
  .respond-to-min(@tablet-min, {
     // image crop for older browsers
     .fcm_wrapper img {
         left: 100%; 
         margin-left: -200%;
     }
  });
}

/* topdoc
    name: EOF
    eof: true
*/
